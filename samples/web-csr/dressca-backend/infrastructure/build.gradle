plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

group = 'com.dressca'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

sourceSets {
    main {
        // mybatis SQL map XML ファイルを java 以下でも検知する
        resources.srcDirs = ["src/main/java", "src/main/resources"]
    }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation supportDependencies.mybatis_spring_boot_starter
	implementation supportDependencies.h2database
	implementation supportDependencies.postgresql
	implementation project(':application-core')
	implementation project(':system-common')
	testImplementation supportDependencies.spring_boot_starter_test
	testImplementation supportDependencies.mybatis_spring_boot_starter_test
}

configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}


tasks.named('test') {
	useJUnitPlatform()
}

bootJar.enabled = false
jar.enabled = true

/*
正規表現と置換のペアをリストにまとめて置き換えを行うことで楽観ロックに対応する。
置き換えのペアは更新対象の検索方法が Example と PrimaryKey のどちらを利用するかで異なる。

◇ Example で検索するメソッドの例（ updateByExampleSelective の場合）

  検索対象
    1. <update id="updateByExampleSelective" から #{row.楽観ロック制御を行う列名} の直前まで
    2. #{row.楽観ロック制御を行う列名,jdbcType=楽観ロック制御を行う列のDB上のデータ型}

  置換文字列
    3. 楽観ロック制御を行う列名 = CURRENT_TIMESTAMP

  操作
    1 の直後に 3 を置いて、 2 は挿入しない。

  〇 置換前
  <update id="updateByExampleSelective" parameterType="map">
    <set>
      <if test="row.rowVersion != null">
        row_version = #{row.rowVersion,jdbcType=TIMESTAMP},
      </if>
    </set>
  </update>

  〇 置換後
  <update id="updateByExampleSelective" parameterType="map">
    <set>
      <if test="row.rowVersion != null">
        row_version = CURRENT_TIMESTAMP,
      </if>
    </set>
  </update>

◇ PrimaryKey で検索するメソッドの例（ updateByPrimaryKey の場合）

  Example の置き換えに加えて以下を行う。

  検索対象
    1. <update id="updateByPrimaryKey" から </update> の直前まで
    2. </update>

  置換文字列
    3. and 楽観ロック制御を行う列名 = #{エンティティに変換した際の楽観ロック制御を行う列名,jdbcType=楽観ロック制御を行う列のDB上のデータ型}

  操作
    1 、3、 2 の順に並び替える。
    ※二重で置換が起きないように、検索条件に置換する文字列が含まれる場合は置き換えを行わないように制御する。

  〇 置換前
  <update id="updateByPrimaryKey" parameterType="com.dressca.infrastructure.repository.mybatis.generated.entity.CatalogItemEntity">
    update catalog_items
    set name = #{name,jdbcType=VARCHAR},
      row_version = #{rowVersion,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  〇 置換後
  <update id="updateByPrimaryKey" parameterType="com.dressca.infrastructure.repository.mybatis.generated.entity.CatalogItemEntity">
    update catalog_items
    set name = #{name,jdbcType=VARCHAR},
      row_version = CURRENT_TIMESTAMP
    where id = #{id,jdbcType=BIGINT}
      and row_version = #{rowVersion,jdbcType=TIMESTAMP}
  </update>
*/
task updateMyBatisGeneratorMapperForOptimisticLocking {
  doLast {

    // MyBatis Generator で生成されたマッパーの xml ファイルがあるディレクトリ
    def generatedDirectory = 'src/main/resources/com/dressca/infrastructure/repository/mybatis/generated/mapper/'

    // 楽観ロック対応させるマッパーの xml ファイルのリスト
    def xmlFilePaths = ['CatalogItemMapper.xml']

    // 楽観ロック制御を行う列名
    def optimisticLockColumn = 'row_version'
    // 楽観ロック制御を行う列のDB上のデータ型
    def optimisticLockJdbcType = 'TIMESTAMP_WITH_TIMEZONE'
    // エンティティに変換した際の楽観ロック制御を行う列名
    def optimisticLockVariable = toLowerCamelCase(optimisticLockColumn)

    xmlFilePaths.each { path ->

      def xmlFile = file(generatedDirectory + path)
      def xmlContent = xmlFile.text

      // 正規表現と置換のペアをリストにまとめる
      def replacements = [
        [ /(<update id="updateByExampleSelective"[\s\S]*?)(${optimisticLockColumn} = \#\{row.${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}},)/,
          "\$1${optimisticLockColumn} = CURRENT_TIMESTAMP," ],
        [ /(<update id="updateByExample"[\s\S]*?)(${optimisticLockColumn} = \#\{row.${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}})/,
          "\$1${optimisticLockColumn} = CURRENT_TIMESTAMP" ],
        [ /(<update id="updateByPrimaryKeySelective"[\s\S]*?)(${optimisticLockColumn} = \#\{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}},)/,
          "\$1${optimisticLockColumn} = CURRENT_TIMESTAMP," ],
        [ /(<update id="updateByPrimaryKeySelective"(?:(?!and ${optimisticLockColumn} = \#\{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}})[\s\S])*?)(<\/update>)/,
          "\$1    and ${optimisticLockColumn} = #{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}}\n  \$2" ],
        [ /(<update id="updateByPrimaryKey"(?:(?!${optimisticLockColumn} = CURRENT_TIMESTAMP)[\s\S])*?)(${optimisticLockColumn} = \#\{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}})/,
          "\$1${optimisticLockColumn} = CURRENT_TIMESTAMP" ],
        [ /(<update id="updateByPrimaryKey"(?:(?!and ${optimisticLockColumn} = \#\{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}})[\s\S])*?)(<\/update>)/,
          "\$1    and ${optimisticLockColumn} = #{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}}\n  \$2" ]
      ]

      // 置換処理をループで実行
      replacements.each { pattern, replacement ->
        xmlContent = xmlContent.replaceAll(pattern, replacement)
      }

      xmlFile.write(xmlContent)
    }
  }
}

// スネークケースをローワーキャメルケースに変換するメソッド
String toLowerCamelCase(String snakeCase) {
  StringBuilder camelCase = new StringBuilder()
  boolean nextCharUpperCase = false

  for (int i = 0; i < snakeCase.length(); i++) {
    char currentChar = snakeCase.charAt(i)

    if (currentChar == '_') {
      nextCharUpperCase = true
    } else {
      if (nextCharUpperCase) {
        camelCase.append(Character.toUpperCase(currentChar))
        nextCharUpperCase = false
      } else {
        camelCase.append(currentChar)
      }
    }
  }

  // 最初の文字を小文字にする
  if (camelCase.length() > 0) {
    camelCase.setCharAt(0, Character.toLowerCase(camelCase.charAt(0)))
  }

  return camelCase.toString()
}