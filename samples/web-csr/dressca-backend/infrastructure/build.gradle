plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

group = 'com.dressca'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

sourceSets {
    main {
        // mybatis SQL map XML ファイルを java 以下でも検知する
        resources.srcDirs = ["src/main/java", "src/main/resources"]
    }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation supportDependencies.mybatis_spring_boot_starter
	implementation supportDependencies.h2database
	implementation supportDependencies.postgresql
	implementation project(':application-core')
	implementation project(':system-common')
	testImplementation supportDependencies.spring_boot_starter_test
	testImplementation supportDependencies.mybatis_spring_boot_starter_test
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar.enabled = false
jar.enabled = true

task replaceXmlContent {
  doLast {

    // 楽観ロック対応させるxmlファイルのリスト
    def xmlFilePaths = ['src/main/resources/com/dressca/infrastructure/repository/mybatis/generated/mapper/CatalogItemMapper.xml']

    xmlFilePaths.each{ path ->

      def xmlFile = file(path)
      def xmlContent = xmlFile.text

      // 正規表現と置換のペアをリストにまとめる
      def replacements = [
        [ /(<sql id="Update_By_Example_Where_Clause">(?:(?!and row_version = \#\{rowVersion,jdbcType=TIMESTAMP})[\s\S])*?)(<\/if>)/,
          '$1and row_version = #{rowVersion,jdbcType=TIMESTAMP}\n        $2' ],
        [ /(<update id="updateByExampleSelective"[\s\S]*?)(row_version = \#\{row.rowVersion,jdbcType=TIMESTAMP},)/,
          '$1row_version = CURRENT_TIMESTAMP,' ],
        [ /(<update id="updateByExample"[\s\S]*?)(row_version = \#\{row.rowVersion,jdbcType=TIMESTAMP})/,
          '$1row_version = CURRENT_TIMESTAMP' ],
        [ /(<update id="updateByPrimaryKeySelective"[\s\S]*?)(row_version = \#\{rowVersion,jdbcType=TIMESTAMP},)/,
          '$1row_version = CURRENT_TIMESTAMP,' ],
        [ /(<update id="updateByPrimaryKeySelective"(?:(?!and row_version = \#\{rowVersion,jdbcType=TIMESTAMP})[\s\S])*?)(<\/update>)/,
          '$1    and row_version = #{rowVersion,jdbcType=TIMESTAMP}\n  $2' ],
        [ /(<update id="updateByPrimaryKey"(?:(?!row_version = CURRENT_TIMESTAMP)[\s\S])*?)(row_version = \#\{rowVersion,jdbcType=TIMESTAMP})/,
          '$1row_version = CURRENT_TIMESTAMP' ],
        [ /(<update id="updateByPrimaryKey"(?:(?!and row_version = \#\{rowVersion,jdbcType=TIMESTAMP})[\s\S])*?)(<\/update>)/,
          '$1    and row_version = #{rowVersion,jdbcType=TIMESTAMP}\n  $2' ]
    ]

    // 置換処理をループで実行
    replacements.each { pattern, replacement ->
      xmlContent = xmlContent.replaceAll(pattern, replacement)
    }

    xmlFile.write(xmlContent)
    }
  }
}