plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

group = 'com.dressca'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

sourceSets {
    main {
        // mybatis SQL map XML ファイルを java 以下でも検知する
        resources.srcDirs = ["src/main/java", "src/main/resources"]
    }
}

repositories {
	mavenCentral()
}

configurations {
  // MyBatis Generator の自動生成で利用するライブラリのための依存関係の構成を定義
  mybatisTasks
  // 使用しないロギングライブラリを除外
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

dependencies {
	implementation supportDependencies.mybatis_spring_boot_starter
	implementation supportDependencies.h2database
	implementation supportDependencies.postgresql
	implementation project(':application-core')
	implementation project(':system-common')
	testImplementation supportDependencies.spring_boot_starter_test
	testImplementation supportDependencies.mybatis_spring_boot_starter_test

  mybatisTasks supportDependencies.mybatis_generator_core
  mybatisTasks supportDependencies.h2database
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar.enabled = false
jar.enabled = true

tasks.register('runMyBatisGenerator') {
  doLast {
    // MyBatis Generator のタスクを定義します。
    ant.taskdef(
      name: 'mybatisGenerator',
      classname: 'org.mybatis.generator.ant.GeneratorAntTask',
      classpath: configurations.mybatisTasks.asPath
    )
    // MyBatis Generator による自動生成を実行します。
    ant.mybatisGenerator(
      overwrite: true,
      configfile: file('src/main/resources/mybatisGeneratorConfig.xml'),
      verbose: true
    )
  }
}

tasks.named('runMyBatisGenerator') {
    finalizedBy 'updateMyBatisGeneratorMapperForOptimisticLocking'
}

// 正規表現と置換のペアをリストにまとめて置き換えを行うことで楽観ロックに対応します。
tasks.register('updateMyBatisGeneratorMapperForOptimisticLocking') {
  doLast {

    // MyBatis Generator で生成されたマッパーの xml ファイルがあるディレクトリ
    def generatedDirectory = 'src/main/resources/com/dressca/infrastructure/repository/mybatis/generated/mapper/'

    // 楽観ロック対応させるマッパーの xml ファイルのリスト
    def xmlFilePaths = ['CatalogItemMapper.xml']

    // 楽観ロック制御を行う列名
    def optimisticLockColumn = 'row_version'
    // 楽観ロック制御を行う列のDB上のデータ型
    def optimisticLockJdbcType = 'TIMESTAMP_WITH_TIMEZONE'
    // エンティティに変換した際の楽観ロック制御を行う列名
    def optimisticLockVariable = toLowerCamelCase(optimisticLockColumn)

    xmlFilePaths.each { path ->

      def xmlFile = file(generatedDirectory + path)
      def xmlContent = xmlFile.text

      // 正規表現と置換のペアのリスト
      // 置き換えの処理は更新対象の検索方法が Example と PrimaryKey のどちらを利用するかで異なります。
      def replacements = [

        /* Exampleの場合、更新処理の set 句で指定する更新後の行バージョンの値を、メソッドの引数から現在時刻に置き換えます。
          〇 置換前
          <update id="updateByExampleSelective" parameterType="map">
            <set>
              <if test="row.rowVersion != null">
                row_version = #{row.rowVersion,jdbcType=TIMESTAMP_WITH_TIMEZONE},
              </if>
            </set>
          </update>

          〇 置換後
          <update id="updateByExampleSelective" parameterType="map">
            <set>
              <if test="row.rowVersion != null">
                row_version = CURRENT_TIMESTAMP,
              </if>
            </set>
          </update> 
        */
        [ /(<update id="updateByExampleSelective"[\s\S]*?)(${optimisticLockColumn} = \#\{row.${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}},)/,
          "\$1${optimisticLockColumn} = CURRENT_TIMESTAMP," ],
        [ /(<update id="updateByExample"[\s\S]*?)(${optimisticLockColumn} = \#\{row.${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}})/,
          "\$1${optimisticLockColumn} = CURRENT_TIMESTAMP" ],

        /* PrimaryKeyの場合、更新処理の set 句で指定する更新後の行バージョンの値を、メソッドの引数から現在時刻に置き換えます。
           さらに、更新処理の対象を検索する where 句で指定する検索条件に行バージョンを追加します。
          〇 置換前
          <update id="updateByPrimaryKey" parameterType="com.dressca.infrastructure.repository.mybatis.generated.entity.CatalogItemEntity">
            update catalog_items
            set name = #{name,jdbcType=VARCHAR},
              row_version = #{rowVersion,jdbcType=TIMESTAMP_WITH_TIMEZONE}
            where id = #{id,jdbcType=BIGINT}
          </update>

          〇 置換後
          <update id="updateByPrimaryKey" parameterType="com.dressca.infrastructure.repository.mybatis.generated.entity.CatalogItemEntity">
            update catalog_items
            set name = #{name,jdbcType=VARCHAR},
              row_version = CURRENT_TIMESTAMP
            where id = #{id,jdbcType=BIGINT}
              and row_version = #{rowVersion,jdbcType=TIMESTAMP_WITH_TIMEZONE}
          </update>
        */
        [ /(<update id="updateByPrimaryKeySelective"[\s\S]*?)(${optimisticLockColumn} = \#\{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}},)/,
          "\$1${optimisticLockColumn} = CURRENT_TIMESTAMP," ],
        [ /(<update id="updateByPrimaryKeySelective"(?:(?!and ${optimisticLockColumn} = \#\{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}})[\s\S])*?)(<\/update>)/,
          "\$1    and ${optimisticLockColumn} = #{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}}\n  \$2" ],
        [ /(<update id="updateByPrimaryKey"(?:(?!${optimisticLockColumn} = CURRENT_TIMESTAMP)[\s\S])*?)(${optimisticLockColumn} = \#\{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}})/,
          "\$1${optimisticLockColumn} = CURRENT_TIMESTAMP" ],
        [ /(<update id="updateByPrimaryKey"(?:(?!and ${optimisticLockColumn} = \#\{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}})[\s\S])*?)(<\/update>)/,
          "\$1    and ${optimisticLockColumn} = #{${optimisticLockVariable},jdbcType=${optimisticLockJdbcType}}\n  \$2" ]
      ]

      // 置換処理をループで実行
      replacements.each { pattern, replacement ->
        xmlContent = xmlContent.replaceAll(pattern, replacement)
      }

      xmlFile.write(xmlContent)
    }
  }
}

// スネークケースをローワーキャメルケースに変換するメソッド
String toLowerCamelCase(String snakeCase) {
  StringBuilder camelCase = new StringBuilder()
  boolean nextCharUpperCase = false

  for (int i = 0; i < snakeCase.length(); i++) {
    char currentChar = snakeCase.charAt(i)

    if (currentChar == '_') {
      nextCharUpperCase = true
    } else {
      if (nextCharUpperCase) {
        camelCase.append(Character.toUpperCase(currentChar))
        nextCharUpperCase = false
      } else {
        camelCase.append(currentChar)
      }
    }
  }

  // 最初の文字を小文字にします
  if (camelCase.length() > 0) {
    camelCase.setCharAt(0, Character.toLowerCase(camelCase.charAt(0)))
  }

  return camelCase.toString()
}